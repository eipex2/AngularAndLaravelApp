class ChatController{
    constructor(API, ToastService, $mdSidenav){
        'ngInject';

        this.API = API;
        this.ToastService = ToastService;
        this.$mdSidenav = $mdSidenav;

    }

    $onInit(){

      this.dynamicItems = new Messages();
      console.log(this.dynamicItems);
    }

    //close contacts side nav
    closeContacts(){
      this.$mdSidenav("contacts-sidenav")
       .close()
    }

    toggleContacts(){
      this.$mdSidenav("contacts-sidenav")
       .toggle()
    }

    toggleExchange(){
      this.$mdSidenav("exchange-sidenav")
       .toggle()
    }

    nonSelected(){
      return this.currentRecipient?true:false;
    }

    getUserConversation(messenger){
      //console.log(messenger);
      var vm = this;
      vm.currentRecipient = messenger.sender
      var data = {
        recipient:messenger.sender.id
      }
      this.API.all('chat/getuserconversation').post(data).then((response) => {
          vm.currentConversation = response.data.conversation;
      });
    }


    sendMessage(){
      this.submitMessage();
    }

    //handles key pressed
    sendMessageKey($event){
      if($event.key === "Enter"){
        this.submitMessage();
      }
    }

    //TODO: implement callbacks for messages not sent
    submitMessage(){
      var data = {
        recipient: this.currentRecipient.id,
        message: this.message
      }

      this.API.all('chat/sendmessage').post(data).then((response) => {
          console.log(response);
          this.message = '';
          This.ToastService.show("Message sent")
      },(error)=>{

      })
    }
}


class Messages {
    constructor(){
      'ngIngect';

      this.loadedPages = {};

      this.numItems = 0;

      this.PAGE_SIZE = 50;

      this.prototype.fetchNumItems_();

      this.prototype.getItemAtIndex= (index)=>{
         var pageNumber = Math.floor(index / this.PAGE_SIZE);
         var page = this.loadedPages[pageNumber];

         if (page) {
           return page[index % this.PAGE_SIZE];
         } else if (page !== null) {
           this.fetchPage_(pageNumber);
         }
      };

      this.prototype.getLength = () => {
        return this.numItems;
      };

      this.prototype.fetchPage_ = (pageNumber)=>{
          // Set the page to null so we know it is already being fetched.
          this.loadedPages[pageNumber] = null;
          var vm = this;

          // For demo purposes, we simulate loading more items with a timed
          // promise. In real code, this function would likely contain an
          // $http request.
          $timeout(angular.noop, 300).then(angular.bind(this, function() {
            this.loadedPages[pageNumber] = [];
            var pageOffset = pageNumber * this.PAGE_SIZE;
            for (var i = pageOffset; i < pageOffset + this.PAGE_SIZE; i++) {
              this.loadedPages[pageNumber].push(i);
            }
          }));
      };

      this.prototype.fetchNumItems_ = function() {
          // For demo purposes, we simulate loading the item count with a timed
          // promise. In real code, this function would likely contain an
          // $http request.
          $timeout(angular.noop, 300).then(angular.bind(this, function() {
            this.numItems = 50000;
          }));
      };
    }
}

export const ChatComponent = {
    templateUrl: './views/app/components/chat/chat.component.html',
    controller: ChatController,
    controllerAs: 'vm',
    bindings: {
      messages:'<messages',
      currentUser:'<currentUser'
    }
}

getUserConversation(messenger){
  //console.log(messenger);
  var vm = this;
  vm.currentRecipient = messenger.sender
  var data = {
    recipient:messenger.sender.id
  }

  this.dynamicMessages = {
    numLoaded_: 0,
    toLoad_: 0,

    // Required.
    getItemAtIndex: function(index) {
      if (index > this.numLoaded_) {
        this.fetchMoreItems_(index);
        return null;
      }

      return index;
    },

    // Required.
    // For infinite scroll behavior, we always return a slightly higher
    // number than the previously loaded items.
    getLength: function() {
      return this.numLoaded_ + 2;
    },

    fetchMoreItems_: function(index) {
      // For demo purposes, we simulate loading more items with a timed
      // promise. In real code, this function would likely contain an
      // $http request.

      if (this.toLoad_ < index) {
        this.toLoad_ += 1;
        //vm.$timeout(angular.noop, 300).then(angular.bind(this, function() {
          vm.API.one('chat/getuserconversation/',data.recipient).customGET("items",{page:this.toLoad}).then((response) => {
              //this.lastpage+=1;
              console.log(response.data);
              this.currentConversation = vm.currentConversation.concat(response.data.conversation.data);
              this.numLoaded_ = this.toLoad_;
              // this.numb
              // this.currentpage = response.current_page;
              //
              // this.loadedPages[pageNumber] = [];
              //
              // this.loadedPages[pageNumber] = conversation;
          });

        //}));
      }
    }
  }

}

<!-- <md-virtual-repeat-container id="vertical-container"   md-top-index="this.dynamicMessages.topIndex">

  <md-list-item class="chat-cloud" layout="row" md-virtual-repeat="chat in vm.dynamicMessages" md-on-demand>

      <img  class="list-user-avatar md-whiteframe-1dp" ng-src={{"/uploads/avatars/"+chat.sender.avatar}}  alt="avatar" />
      <div layout="column" flex class="message_cloud md-whiteframe-1dp" >
          <div layout-padding>{{chat.sender.firstname+ ': '+ chat.message}}</div>
          <div layout="row" layout-align="start end">
            <span flex></span>
            <span class="message_datetime">{{chat.created_at}}</span>
          </div>
      </div>
  </md-list-item>
</md-virtual-repeat-container> -->
